#pragma once

/************************************************************
************************************************************/
#include "L_common.h"


/************************************************************************************************************************/
namespace SPACE_LIGHT{



/************************************************************
************************************************************/
struct PHYSICAL_LED_COLOR_CH{
	COLOR LedColor;
	COLOR LedFrom;
	COLOR LedTo;
	
	const bool IsDynamicColor;
	int t_ColorChangeStart;
	enum COLOR_CHANGE_KEEP f_ColorChange;
};



/************************************************************
Physical Led setting like Multi or Single color.
Copy from PhysicalLeds.xlsx

ÅöÅöÅöÅöÅöÅöÅöÅöÅöÅöÅöÅöÅöÅöÅöÅöÅöÅöÅöÅöÅöÅöÅöÅöÅöÅöÅöÅöÅöÅö
Copy from Excel below.
ÅöÅöÅöÅöÅöÅöÅöÅöÅöÅöÅöÅöÅöÅöÅöÅöÅöÅöÅöÅöÅöÅöÅöÅöÅöÅöÅöÅöÅöÅö
************************************************************/
static PHYSICAL_LED_COLOR_CH PhysicalLedColorCh[] = {															
/* 0 */	{	{0, 0, 255},	{0, 0, 255},	{0, 0, 255},	true	,	0,	COLOR_KEEP	},						
/* 1 */	{	{0, 0, 255},	{0, 0, 255},	{0, 0, 255},	true	,	0,	COLOR_KEEP	},						
/* 2 */	{	{0, 0, 255},	{0, 0, 255},	{0, 0, 255},	true	,	0,	COLOR_KEEP	},						
/* 3 */	{	{0, 0, 255},	{0, 0, 255},	{0, 0, 255},	true	,	0,	COLOR_KEEP	},						
/* 4 */	{	{0, 0, 255},	{0, 0, 255},	{0, 0, 255},	true	,	0,	COLOR_KEEP	},						
/* 5 */	{	{0, 0, 255},	{0, 0, 255},	{0, 0, 255},	true	,	0,	COLOR_KEEP	},						
/* 6 */	{	{0, 0, 255},	{0, 0, 255},	{0, 0, 255},	true	,	0,	COLOR_KEEP	},						
/* 7 */	{	{0, 0, 255},	{0, 0, 255},	{0, 0, 255},	true	,	0,	COLOR_KEEP	},						
/* 8 */	{	{0, 0, 255},	{0, 0, 255},	{0, 0, 255},	true	,	0,	COLOR_KEEP	},						
/* 9 */	{	{0, 0, 255},	{0, 0, 255},	{0, 0, 255},	true	,	0,	COLOR_KEEP	},						
/* 10 */	{	{0, 0, 255},	{0, 0, 255},	{0, 0, 255},	true	,	0,	COLOR_KEEP	},						
/* 11 */	{	{0, 0, 255},	{0, 0, 255},	{0, 0, 255},	true	,	0,	COLOR_KEEP	},						
/* 12 */	{	{0, 0, 255},	{0, 0, 255},	{0, 0, 255},	true	,	0,	COLOR_KEEP	},						
/* 13 */	{	{0, 0, 255},	{0, 0, 255},	{0, 0, 255},	true	,	0,	COLOR_KEEP	},						
/* 14 */	{	{0, 0, 255},	{0, 0, 255},	{0, 0, 255},	true	,	0,	COLOR_KEEP	},						
/* 15 */	{	{0, 0, 255},	{0, 0, 255},	{0, 0, 255},	true	,	0,	COLOR_KEEP	},						
/* 16 */	{	{0, 0, 255},	{0, 0, 255},	{0, 0, 255},	true	,	0,	COLOR_KEEP	},						
/* 17 */	{	{0, 0, 255},	{0, 0, 255},	{0, 0, 255},	true	,	0,	COLOR_KEEP	},						
/* 18 */	{	{0, 0, 255},	{0, 0, 255},	{0, 0, 255},	true	,	0,	COLOR_KEEP	},						
/* 19 */	{	{0, 0, 255},	{0, 0, 255},	{0, 0, 255},	true	,	0,	COLOR_KEEP	},						
/* 20 */	{	{0, 0, 255},	{0, 0, 255},	{0, 0, 255},	true	,	0,	COLOR_KEEP	},						
/* 21 */	{	{0, 0, 255},	{0, 0, 255},	{0, 0, 255},	true	,	0,	COLOR_KEEP	},						
/* 22 */	{	{0, 0, 255},	{0, 0, 255},	{0, 0, 255},	true	,	0,	COLOR_KEEP	},						
/* 23 */	{	{0, 0, 255},	{0, 0, 255},	{0, 0, 255},	true	,	0,	COLOR_KEEP	},						
/* 24 */	{	{0, 0, 255},	{0, 0, 255},	{0, 0, 255},	true	,	0,	COLOR_KEEP	},						
/* 25 */	{	{0, 0, 255},	{0, 0, 255},	{0, 0, 255},	true	,	0,	COLOR_KEEP	},						
/* 26 */	{	{0, 0, 255},	{0, 0, 255},	{0, 0, 255},	true	,	0,	COLOR_KEEP	},						
/* 27 */	{	{0, 0, 255},	{0, 0, 255},	{0, 0, 255},	true	,	0,	COLOR_KEEP	},						
/* 28 */	{	{0, 0, 255},	{0, 0, 255},	{0, 0, 255},	true	,	0,	COLOR_KEEP	},						
/* 29 */	{	{0, 0, 255},	{0, 0, 255},	{0, 0, 255},	true	,	0,	COLOR_KEEP	},						
/* 30 */	{	{0, 0, 255},	{0, 0, 255},	{0, 0, 255},	true	,	0,	COLOR_KEEP	},						
/* 31 */	{	{0, 0, 255},	{0, 0, 255},	{0, 0, 255},	true	,	0,	COLOR_KEEP	},						
/* 32 */	{	{0, 0, 255},	{0, 0, 255},	{0, 0, 255},	true	,	0,	COLOR_KEEP	},						
/* 33 */	{	{255, 255, 255},	{255, 255, 255},	{255, 255, 255},	false	,	0,	COLOR_KEEP	},						
/* 34 */	{	{255, 255, 255},	{255, 255, 255},	{255, 255, 255},	false	,	0,	COLOR_KEEP	},						
/* 35 */	{	{255, 255, 255},	{255, 255, 255},	{255, 255, 255},	false	,	0,	COLOR_KEEP	},						
/* 36 */	{	{255, 255, 255},	{255, 255, 255},	{255, 255, 255},	false	,	0,	COLOR_KEEP	},						
/* 37 */	{	{255, 255, 255},	{255, 255, 255},	{255, 255, 255},	false	,	0,	COLOR_KEEP	},						
/* 38 */	{	{255, 255, 255},	{255, 255, 255},	{255, 255, 255},	false	,	0,	COLOR_KEEP	},						
/* 39 */	{	{255, 255, 255},	{255, 255, 255},	{255, 255, 255},	false	,	0,	COLOR_KEEP	},						
/* 40 */	{	{255, 255, 255},	{255, 255, 255},	{255, 255, 255},	false	,	0,	COLOR_KEEP	},						
/* 41 */	{	{255, 255, 255},	{255, 255, 255},	{255, 255, 255},	false	,	0,	COLOR_KEEP	},						
/* 42 */	{	{255, 255, 255},	{255, 255, 255},	{255, 255, 255},	false	,	0,	COLOR_KEEP	},						
/* 43 */	{	{255, 255, 255},	{255, 255, 255},	{255, 255, 255},	false	,	0,	COLOR_KEEP	},						
/* 44 */	{	{255, 255, 255},	{255, 255, 255},	{255, 255, 255},	false	,	0,	COLOR_KEEP	},						
/* 45 */	{	{255, 255, 255},	{255, 255, 255},	{255, 255, 255},	false	,	0,	COLOR_KEEP	},						
/* 46 */	{	{255, 255, 255},	{255, 255, 255},	{255, 255, 255},	false	,	0,	COLOR_KEEP	},						
/* 47 */	{	{255, 255, 255},	{255, 255, 255},	{255, 255, 255},	false	,	0,	COLOR_KEEP	},						
/* 48 */	{	{255, 255, 255},	{255, 255, 255},	{255, 255, 255},	false	,	0,	COLOR_KEEP	},						
/* 49 */	{	{255, 255, 255},	{255, 255, 255},	{255, 255, 255},	false	,	0,	COLOR_KEEP	},						
/* 50 */	{	{255, 255, 255},	{255, 255, 255},	{255, 255, 255},	false	,	0,	COLOR_KEEP	},						
/* 51 */	{	{255, 255, 255},	{255, 255, 255},	{255, 255, 255},	false	,	0,	COLOR_KEEP	},						
/* 52 */	{	{255, 255, 255},	{255, 255, 255},	{255, 255, 255},	false	,	0,	COLOR_KEEP	},						
/* 53 */	{	{255, 255, 255},	{255, 255, 255},	{255, 255, 255},	false	,	0,	COLOR_KEEP	},						
/* 54 */	{	{255, 255, 255},	{255, 255, 255},	{255, 255, 255},	false	,	0,	COLOR_KEEP	},						
/* 55 */	{	{255, 255, 255},	{255, 255, 255},	{255, 255, 255},	false	,	0,	COLOR_KEEP	},						
/* 56 */	{	{255, 255, 255},	{255, 255, 255},	{255, 255, 255},	false	,	0,	COLOR_KEEP	},						
/* 57 */	{	{255, 255, 255},	{255, 255, 255},	{255, 255, 255},	false	,	0,	COLOR_KEEP	},						
/* 58 */	{	{255, 255, 255},	{255, 255, 255},	{255, 255, 255},	false	,	0,	COLOR_KEEP	},						
/* 59 */	{	{255, 255, 255},	{255, 255, 255},	{255, 255, 255},	false	,	0,	COLOR_KEEP	},						
/* 60 */	{	{255, 255, 255},	{255, 255, 255},	{255, 255, 255},	false	,	0,	COLOR_KEEP	},						
/* 61 */	{	{255, 255, 255},	{255, 255, 255},	{255, 255, 255},	false	,	0,	COLOR_KEEP	},						
/* 62 */	{	{255, 255, 255},	{255, 255, 255},	{255, 255, 255},	false	,	0,	COLOR_KEEP	},						
/* 63 */	{	{255, 255, 255},	{255, 255, 255},	{255, 255, 255},	false	,	0,	COLOR_KEEP	},						
/* 64 */	{	{255, 255, 255},	{255, 255, 255},	{255, 255, 255},	false	,	0,	COLOR_KEEP	},						
/* 65 */	{	{255, 255, 255},	{255, 255, 255},	{255, 255, 255},	false	,	0,	COLOR_KEEP	},						
};															
															
enum{															
NUM_PHYSICAL_LEDS = sizeof(PhysicalLedColorCh) / sizeof(PhysicalLedColorCh[0]),															
};															

/************************************************************************************************************************/
} // namespace SPACE_LIGHT{


